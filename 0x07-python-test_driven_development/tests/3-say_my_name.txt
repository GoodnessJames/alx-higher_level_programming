# 3-say_my_name.txt

===========================
How to Use 3-say_my_name.py
===========================

This modules defines a function ``say_my_name(first_name, last_name="")``.

USAGE:

``say_my_name(...)`` prints "My name is <first_name> <last_name>".

Import the method to test:
>>> say_my_name = __import__('3-say_my_name').say_my_name

Test two strings given:

::

    >>> say_my_name("Goodness", "James")
    My name is Goodness James

    >>> say_my_name("Eva", "Deva")
    My name is Eva Deva

The parameter ```last_name``` is optional. If no last name is provided,
an empty string is printed instead.

::

    >>> say_my_name("Goodness")
    My name is Goodness 

FAIL CASES:

The parameters ``first_name`` and ``last_name``` must be strings. Otherwise,
a TypeError is raised.

Test other data types:

::

    >>> say_my_name(6, "James")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Mia", ["Tia", "Lia", "Sia"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name({"LeBron": 8, "James": 19}, 7.11)
    Traceback (most recent call last):
    TypeError: first_name must be a string

Test extra args:

::

    >>> say_my_name("Biggie", "O", "extra")
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

Test no args:

::

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

Test too few args:

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
